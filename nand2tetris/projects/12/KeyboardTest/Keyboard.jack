// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
	return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
	return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
	var char c;
	do Output.printChar(0);
	while (Keyboard.keyPressed() = 0) {
	}
	let c = Keyboard.keyPressed();
	while (~(Keyboard.keyPressed() = 0) ) {
	}
	do Output.backSpace();
	do Output.printChar(c);
	return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
	var String input,tmp;
	var char c;
	var int max, length, i;
	let max = 0;
	let c = 0;
	let input = String.new(50);

	do Output.printString(message);

	while( ~(c = 128) ) {
		let c = Keyboard.readChar();
		if ( (c = 129) & (input.length() > 0) ) {
			do Output.backSpace();
			do Output.backSpace();
			do input.eraseLastChar();
		}
		else { if (c = 128) {
			do Output.backSpace();
			do Output.println();
		}
		else { if ( c = 129 ) {
			do Output.backSpace();
			}
		else {
			if (input.length() = (50 + (20 * max))) {
				let max = max + 1;
				let tmp = input;
				let input = String.new(50 + (20 * max));
				let length = tmp.length();
				let i = 0;
				while( i < length ) {
					do input.appendChar(tmp.charAt(i));
					let i = i + 1;
				}
			}
			do input.appendChar(c);
		}}}
	}
	return input;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
	var String input;
	let input = Keyboard.readLine(message);
	return input.intValue();
    }
}
