// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if (maxLength > 0) {
	let str = Array.new(maxLength);
	}
	else {
	let str = 0;
	}
	let length = 0;
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(this);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	if ( j < length) {
		let str[j] = c;
	}
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	let str[length] = c;
	let length = length + 1;
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	let str[length - 1] = 0;
	let length = length - 1;
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var char c;
	var int d, num, i;
	var boolean neg;
	let i = 0;
	let num = 0;
	while ( i < length ) {
		let d = charAt(i) - 48;
		//do Output.printInt(d);
		if ( (d>-1) & (d<10) ) {
			let num = (num * 10) + d;
		}
		else { if ( (d = -3) & (i = 0) ) {
			let neg = true;
		}
		else {
			return num;
		}}
		let i = i + 1;
	}
	if (neg){
		return -num;
	}
	else {
		return num;
	}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int digit, num, len, i;
	var Array digit;
	if ( ~(length = 0) ) {
		let length = 0;
	}
	let digit = Array.new(5);
	if (val = 0) {
		do appendChar(0 + 48);
		return;
	}
	if (val < 0) {
		do appendChar(45);
		let val = -val;
	}
	let num = val;
	while(num > 0) {
		let digit[len] = num - (10 * (num/10) );
		let num = num / 10;
		let len = len + 1;
	}
	while (len > 0) {
		do appendChar(digit[len - 1] + 48);
		let len = len - 1;
	}
	return;
    }
    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}
